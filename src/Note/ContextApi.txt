The Context API is a feature provided by React, a JavaScript library for building user interfaces.
It allows you to share data between components without the need to pass props manually through each level of the component tree.

Context provides a way to create a global state or share data that can be accessed by any component within the context. 
It is especially useful when multiple components need access to the same data, such as themes, 
authentication status, language preferences, or any other shared state.

The Context API consists of three main components:

Context: The context itself is created using the createContext function from React. 
It returns an object containing a Provider component and a Consumer component. 
The Provider component is used to provide the data to the components, while the Consumer component is used to consume the data.

Provider: The Provider component is responsible for providing the data or state to the child components. 
It accepts a value prop that holds the data you want to share. When the value of the context changes, 
all the components that consume that context will re-render.

Consumer: The Consumer component is used to access the data or state provided by the context. 
It uses a render prop or a function as a child pattern, where you pass a function as a child to the Consumer component. 
This function receives the context value as an argument and returns the JSX or content to render based on that value.

In addition to the Consumer component, React also provides the useContext hook, 
which allows functional components to consume context directly without the need for a Consumer component.

By using the Context API, you can avoid prop drilling (passing props through multiple components) and easily share data across components, 
making your code cleaner and more efficient.






Context is designed to share data that can be considered “global” for a tree of React components, 
such as the current authenticated user, theme, or preferred language.

Using context, we can avoid passing props through intermediate elements:



// Context lets us pass a value deep into the component tree
// without explicitly threading it through every component.
// Create a context for the current theme (with "light" as the default).
const ThemeContext = React.createContext('light');

class App extends React.Component {
  render() {
    // Use a Provider to pass the current theme to the tree below.
    // Any component can read it, no matter how deep it is.
    // In this example, we're passing "dark" as the current value.
    return (
      <ThemeContext.Provider value="dark">
        <Toolbar />
      </ThemeContext.Provider>
    );
  }
}

// A component in the middle doesn't have to
// pass the theme down explicitly anymore.
function Toolbar() {
  return (
    <div>
      <ThemedButton />
    </div>
  );
}

class ThemedButton extends React.Component {
  // Assign a contextType to read the current theme context.
  // React will find the closest theme Provider above and use its value.
  // In this example, the current theme is "dark".
  static contextType = ThemeContext;
  render() {
    return <Button theme={this.context} />;
  }
}
